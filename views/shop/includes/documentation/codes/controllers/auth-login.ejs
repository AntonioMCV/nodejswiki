  // Package to encrypt passwords
  const bcrypt = require('bcryptjs')
  const { validationResult } = require('express-validator')

  const User = require('../models/user')

  exports.getLogin = (req, res, next) => {
    res.render('shop/auth/login', {
      pageTitle: 'Login',
      path: '/login',
      errorMessage: req.flash('error'),
      oldInput: {
        email: '',
        password: ''
      },
      validationErrors: [],
      translates: global.lang.examples.store.login
    })
  }

  exports.postLogin = (req, res, next) => {
    const email = req.body.email
    const password = req.body.password

    const errors = validationResult(req)
    if (!errors.isEmpty()) {
      return res.status(422).render('shop/auth/login', {
        path: '/login',
        pageTitle: 'Login',
        errorMessage: errors.array()[0].msg,
        oldInput: {
          email: email,
          password: password
        },
        validationErrors: errors.array(),
        translates: global.lang.examples.store.login
      })
    }

    User.findOne({ email: email })
      .then(user => {
        if (!user) {
          return res.status(422).render('shop/auth/login', {
            path: '/login',
            pageTitle: 'Login',
            errorMessage: 'Invalid email or password.',
            oldInput: {
              email: email,
              password: password
            },
            validationErrors: [],
            translates: global.lang.examples.store.login
          })
        }
        bcrypt
          .compare(password, user.password)
          .then(doMatch => {
            if (doMatch) {
              // Create a new user in the database session collection
              req.session.isLoggedIn = true
              req.session.user = user
              return req.session.save(err => {
                console.log(err)
                res.redirect('/' + global.lang.current + '/examples/store')
              })
            }
            return res.status(422).render('shop/auth/login', {
              path: '/login',
              pageTitle: 'Login',
              errorMessage: 'Invalid email or password.',
              oldInput: {
                email: email,
                password: password
              },
              validationErrors: [],
              translates: global.lang.examples.store.login
            })
          })
          .catch(err => {
            console.log(err)
            res.redirect('/' + global.lang.current + '/examples/store/auth/login')
          })
      })
      .catch((err) => {
        const error = new Error(err)
        error.httpStatusCode = 500
        return next(error)
      })
  }